import React, { useState, useEffect } from 'react';

const LojaRobloxAvancada = () => {
  // Estados principais
  const [studentName, setStudentName] = useState('');
  const [currentPhase, setCurrentPhase] = useState('inicio'); // inicio, selecao, jogo, resultado
  const [currentBlock, setCurrentBlock] = useState(null);
  const [currentQuestion, setCurrentQuestion] = useState(0);
  const [carrinho, setCarrinho] = useState([]);
  const [totalGasto, setTotalGasto] = useState(0);
  const [robuxBalance, setRobuxBalance] = useState(50);
  const [collectedData, setCollectedData] = useState([]);
  const [startTime, setStartTime] = useState(null);
  const [completedBlocks, setCompletedBlocks] = useState([]);
  const [showFeedback, setShowFeedback] = useState(false);
  const [feedbackMessage, setFeedbackMessage] = useState('');

  // Estrutura dos 3 blocos
  const blocos = [
    {
      id: 1,
      titulo: "Primeiras Compras",
      subtitulo: "Começando no Roblox",
      cor: "from-green-400 to-blue-500",
      dificuldade: "Fácil",
      objetivo: "Aquecer com somas simples",
      robuxInicial: 50,
      situacoes: [
        {
          contexto: "Você acabou de criar sua conta no Roblox e ganhou 50 Robux de bônus! Hora de personalizar seu avatar.",
          pergunta: "Compre uma camisa (10 Robux) e um chapéu (15 Robux). Quanto você gastará?",
          itens: [
            { id: 1, nome: "Camisa Básica", preco: 10, emoji: "👕" },
            { id: 2, nome: "Chapéu Legal", preco: 15, emoji: "🎩" },
            { id: 3, nome: "Óculos", preco: 8, emoji: "🕶️" },
            { id: 4, nome: "Tênis", preco: 12, emoji: "👟" }
          ],
          respostaEsperada: 25,
          dica: "Some os preços: 10 + 15 = ?",
          metaItens: 2,
          itensObrigatorios: [1, 2]
        },
        {
          contexto: "Seu avatar está ficando massa! Agora você quer completar o visual.",
          pergunta: "Adicione óculos (8 Robux) ao seu look anterior. Qual será o total gasto?",
          itens: [
            { id: 1, nome: "Camisa Básica", preco: 10, emoji: "👕" },
            { id: 2, nome: "Chapéu Legal", preco: 15, emoji: "🎩" },
            { id: 3, nome: "Óculos", preco: 8, emoji: "🕶️" },
            { id: 4, nome: "Tênis", preco: 12, emoji: "👟" }
          ],
          respostaEsperada: 33,
          dica: "Você já tinha gasto 25 Robux. Agora some mais 8 Robux",
          metaItens: 3,
          itensObrigatorios: [1, 2, 3]
        },
        {
          contexto: "Perfeito! Agora você quer saber quanto vai sobrar para outras compras.",
          pergunta: "Você tinha 50 Robux e gastou 33. Quanto sobrou?",
          itens: [
            { id: 1, nome: "Camisa Básica", preco: 10, emoji: "👕" },
            { id: 2, nome: "Chapéu Legal", preco: 15, emoji: "🎩" },
            { id: 3, nome: "Óculos", preco: 8, emoji: "🕶️" },
            { id: 4, nome: "Tênis", preco: 12, emoji: "👟" }
          ],
          respostaEsperada: 17,
          dica: "Calcule: 50 - 33 = ?",
          metaItens: 3,
          itensObrigatorios: [1, 2, 3],
          mostrarSobra: true
        },
        {
          contexto: "Você descobriu que ainda dá para comprar mais uma coisa!",
          pergunta: "Com os 17 Robux que sobraram, você pode comprar os tênis (12 Robux)?",
          itens: [
            { id: 1, nome: "Camisa Básica", preco: 10, emoji: "👕" },
            { id: 2, nome: "Chapéu Legal", preco: 15, emoji: "🎩" },
            { id: 3, nome: "Óculos", preco: 8, emoji: "🕶️" },
            { id: 4, nome: "Tênis", preco: 12, emoji: "👟" }
          ],
          respostaEsperada: 45,
          dica: "Some tudo: 33 + 12 = ?",
          metaItens: 4,
          itensObrigatorios: [1, 2, 3, 4]
        },
        {
          contexto: "Sucesso! Você montou seu primeiro look completo no Roblox!",
          pergunta: "Quantos Robux sobraram depois de todas as compras?",
          itens: [
            { id: 1, nome: "Camisa Básica", preco: 10, emoji: "👕" },
            { id: 2, nome: "Chapéu Legal", preco: 15, emoji: "🎩" },
            { id: 3, nome: "Óculos", preco: 8, emoji: "🕶️" },
            { id: 4, nome: "Tênis", preco: 12, emoji: "👟" }
          ],
          respostaEsperada: 5,
          dica: "Você tinha 50 e gastou 45. Quanto sobrou?",
          metaItens: 4,
          itensObrigatorios: [1, 2, 3, 4],
          mostrarSobra: true
        }
      ]
    },
    {
      id: 2,
      titulo: "Desafios da Loja",
      subtitulo: "Situações interessantes",
      cor: "from-purple-500 to-pink-500",
      dificuldade: "Médio",
      objetivo: "Resolver problemas práticos",
      robuxInicial: 150,
      situacoes: [
        {
          contexto: "Seus amigos te convidaram para uma festa temática! Você precisa de um look especial e tem 150 Robux.",
          pergunta: "Para a festa, você precisa de: roupa temática (45 Robux) + acessório especial (38 Robux). Consegue comprar os dois?",
          itens: [
            { id: 1, nome: "Roupa de Pirata", preco: 45, emoji: "🏴‍☠️" },
            { id: 2, nome: "Espada Dourada", preco: 38, emoji: "⚔️" },
            { id: 3, nome: "Fantasia Ninja", preco: 52, emoji: "🥷" },
            { id: 4, nome: "Katana", preco: 41, emoji: "🗡️" }
          ],
          respostaEsperada: 83,
          dica: "Some: 45 + 38 = ?",
          metaItens: 2,
          itensObrigatorios: [1, 2]
        },
        {
          contexto: "Legal! Você está pronto para a festa. Mas seus amigos sugeriram um tema diferente: ninja!",
          pergunta: "Se trocar para fantasia ninja (52 Robux) + katana (41 Robux), gastará mais ou menos que a opção anterior?",
          itens: [
            { id: 1, nome: "Roupa de Pirata", preco: 45, emoji: "🏴‍☠️" },
            { id: 2, nome: "Espada Dourada", preco: 38, emoji: "⚔️" },
            { id: 3, nome: "Fantasia Ninja", preco: 52, emoji: "🥷" },
            { id: 4, nome: "Katana", preco: 41, emoji: "🗡️" }
          ],
          respostaEsperada: 93,
          dica: "Calcule: 52 + 41 = ? Compare com 83 Robux da opção anterior",
          metaItens: 2,
          itensObrigatorios: [3, 4]
        },
        {
          contexto: "Você descobriu que na festa haverá uma competição! Quem tiver o melhor visual ganha 100 Robux de prêmio!",
          pergunta: "Se você gastar 93 Robux no visual ninja e ganhar 100 Robux de prêmio, quantos Robux terá no final?",
          itens: [
            { id: 1, nome: "Roupa de Pirata", preco: 45, emoji: "🏴‍☠️" },
            { id: 2, nome: "Espada Dourada", preco: 38, emoji: "⚔️" },
            { id: 3, nome: "Fantasia Ninja", preco: 52, emoji: "🥷" },
            { id: 4, nome: "Katana", preco: 41, emoji: "🗡️" }
          ],
          respostaEsperada: 157,
          dica: "Você tinha 150, gastou 93, ganhou 100. Calcule: 150 - 93 + 100",
          metaItens: 2,
          itensObrigatorios: [3, 4],
          premioEspecial: 100
        },
        {
          contexto: "Incrível! Você ganhou a competição! Agora tem mais Robux para gastar em melhorias.",
          pergunta: "Com seus novos 157 Robux, você quer melhorar seu quarto virtual. Uma cama custa 89 Robux e uma mesa 52 Robux. Dá para comprar os dois?",
          itens: [
            { id: 1, nome: "Cama Gamer", preco: 89, emoji: "🛏️" },
            { id: 2, nome: "Mesa de Estudos", preco: 52, emoji: "🪑" },
            { id: 3, nome: "Estante Legal", preco: 76, emoji: "📚" },
            { id: 4, nome: "Tapete Fofo", preco: 34, emoji: "🪄" }
          ],
          respostaEsperada: 141,
          dica: "Some: 89 + 52 = ? Compare com seus 157 Robux",
          metaItens: 2,
          itensObrigatorios: [1, 2],
          robuxDisponiveis: 157
        },
        {
          contexto: "Seu quarto está ficando show! Agora você quer decidir se vale a pena comprar mais decoração.",
          pergunta: "Depois de comprar cama e mesa (141 Robux), quantos Robux sobrarão para outras compras?",
          itens: [
            { id: 1, nome: "Cama Gamer", preco: 89, emoji: "🛏️" },
            { id: 2, nome: "Mesa de Estudos", preco: 52, emoji: "🪑" },
            { id: 3, nome: "Estante Legal", preco: 76, emoji: "📚" },
            { id: 4, nome: "Tapete Fofo", preco: 34, emoji: "🪄" }
          ],
          respostaEsperada: 16,
          dica: "Calcule: 157 - 141 = ?",
          metaItens: 2,
          itensObrigatorios: [1, 2],
          mostrarSobra: true,
          robuxDisponiveis: 157
        }
      ]
    },
    {
      id: 3,
      titulo: "Expert Challenge",
      subtitulo: "Restrições complexas",
      cor: "from-red-500 to-orange-600",
      dificuldade: "Difícil",
      objetivo: "Gerenciar orçamento limitado",
      robuxInicial: 200,
      situacoes: [
        {
          contexto: "DESAFIO ESPECIAL: Você tem exatamente 200 Robux para montar um combo perfeito. Cada item só pode ser comprado UMA vez!",
          pergunta: "Escolha exatamente 3 itens que somem o mais próximo possível de 180 Robux (sem passar de 200).",
          itens: [
            { id: 1, nome: "Avatar Épico", preco: 85, emoji: "🦸" },
            { id: 2, nome: "Pet Dragão", preco: 67, emoji: "🐉" },
            { id: 3, nome: "Casa Moderna", preco: 92, emoji: "🏠" },
            { id: 4, nome: "Carro Veloz", preco: 78, emoji: "🏎️" },
            { id: 5, nome: "Roupa VIP", preco: 58, emoji: "👑" },
            { id: 6, nome: "Acessório Raro", preco: 43, emoji: "✨" }
          ],
          respostaEsperada: 180,
          dica: "Procure combinações que somem próximo de 180. Ex: 85 + 67 + 28 = 180",
          metaItens: 3,
          restricaoOrcamento: 200,
          metaIdeal: 180
        },
        {
          contexto: "Muito bem! Agora um desafio ainda maior: você precisa fazer o melhor negócio possível!",
          pergunta: "Com 200 Robux, compre 4 itens gastando EXATAMENTE entre 185 e 195 Robux. Qual a melhor combinação?",
          itens: [
            { id: 1, nome: "Skin Lendária", preco: 72, emoji: "⭐" },
            { id: 2, nome: "Emote Especial", preco: 39, emoji: "💃" },
            { id: 3, nome: "Mascote Fofo", preco: 54, emoji: "🐹" },
            { id: 4, nome: "Veículo Aéreo", preco: 81, emoji: "🚁" },
            { id: 5, nome: "Decoração Premium", preco: 45, emoji: "🎨" },
            { id: 6, nome: "Música Exclusiva", preco: 28, emoji: "🎵" }
          ],
          respostaEsperada: 190,
          dica: "Tente diferentes combinações de 4 itens. Objetivo: entre 185-195 Robux",
          metaItens: 4,
          restricaoOrcamento: 200,
          faixaIdeal: [185, 195]
        },
        {
          contexto: "MEGA DESAFIO FINAL: Situação real! Você quer impressionar seus amigos com compras inteligentes.",
          pergunta: "Você tem 200 Robux mas DEVE guardar pelo menos 50 para emergências. Com os 150 restantes, compre o máximo de itens possível!",
          itens: [
            { id: 1, nome: "Kit Aventureiro", preco: 48, emoji: "🎒" },
            { id: 2, nome: "Poção Mágica", preco: 35, emoji: "🧪" },
            { id: 3, nome: "Espada de Cristal", preco: 62, emoji: "⚔️" },
            { id: 4, nome: "Armadura Leve", preco: 71, emoji: "🛡️" },
            { id: 5, nome: "Botas Rápidas", preco: 29, emoji: "👢" },
            { id: 6, nome: "Capa Mística", preco: 44, emoji: "🧙‍♂️" }
          ],
          respostaEsperada: 148,
          dica: "Máximo 150 Robux. Tente comprar vários itens: 48+35+29+44 = 156 (muito!). Ajuste a combinação.",
          metaItens: 5,
          restricaoOrcamento: 150,
          reservaObrigatoria: 50,
          maximizarItens: true
        },
        {
          contexto: "DESAFIO BÔNUS: Você se tornou um expert em administrar Robux! Hora do teste final.",
          pergunta: "Situação real: Seus pais te deram 200 Robux com a condição de gastar no máximo 75% e guardar 25% para o futuro. Quanto você pode gastar?",
          itens: [
            { id: 1, nome: "Coleção Completa", preco: 149, emoji: "📦" },
            { id: 2, nome: "Pacote VIP", preco: 87, emoji: "👑" },
            { id: 3, nome: "Bundle Especial", preco: 93, emoji: "🎁" },
            { id: 4, nome: "Kit Premium", preco: 76, emoji: "💎" },
            { id: 5, nome: "Oferta Limitada", preco: 68, emoji: "⏰" },
            { id: 6, nome: "Combo Perfeito", preco: 82, emoji: "🌟" }
          ],
          respostaEsperada: 150,
          dica: "75% de 200 = ? Você pode gastar até esse valor",
          metaItens: 2,
          restricaoOrcamento: 150,
          calculoPorcentagem: true
        },
        {
          contexto: "FINAL ÉPICO: Você provou ser um mestre em matemática financeira do Roblox!",
          pergunta: "Para celebrar, escolha sua compra final: qual item cabe exatamente no seu orçamento disponível?",
          itens: [
            { id: 1, nome: "Coleção Completa", preco: 149, emoji: "📦" },
            { id: 2, nome: "Pacote VIP", preco: 87, emoji: "👑" },
            { id: 3, nome: "Bundle Especial", preco: 93, emoji: "🎁" },
            { id: 4, nome: "Kit Premium", preco: 76, emoji: "💎" },
            { id: 5, nome: "Oferta Limitada", preco: 68, emoji: "⏰" },
            { id: 6, nome: "Combo Perfeito", preco: 82, emoji: "🌟" }
          ],
          respostaEsperada: 149,
          dica: "Você pode gastar até 150 Robux. Qual item tem o melhor custo-benefício?",
          metaItens: 1,
          restricaoOrcamento: 150,
          compraFinal: true
        }
      ]
    }
  ];

  // Efeitos
  useEffect(() => {
    if (currentPhase === 'jogo' && !startTime) {
      setStartTime(Date.now());
    }
  }, [currentPhase]);

  useEffect(() => {
    const total = carrinho.reduce((sum, item) => sum + item.preco, 0);
    setTotalGasto(total);
  }, [carrinho]);

  // Funções principais
  const iniciarJogo = () => {
    if (!studentName.trim()) {
      alert('Digite seu nome primeiro!');
      return;
    }
    setCurrentPhase('selecao');
  };

  const selecionarBloco = (bloco) => {
    setCurrentBlock(bloco);
    setCurrentQuestion(0);
    setCarrinho([]);
    setRobuxBalance(bloco.robuxInicial);
    setCurrentPhase('jogo');
    setStartTime(Date.now());
  };

  const adicionarAoCarrinho = (item) => {
    if (!carrinho.find(c => c.id === item.id)) {
      setCarrinho([...carrinho, item]);
    }
  };

  const removerDoCarrinho = (itemId) => {
    setCarrinho(carrinho.filter(c => c.id !== itemId));
  };

  const verificarResposta = () => {
    const situacao = currentBlock.situacoes[currentQuestion];
    const timeSpent = (Date.now() - startTime) / 1000;
    
    // Validar resposta baseada no tipo de situação
    let isCorrect = false;
    let feedback = '';

    if (situacao.itensObrigatorios) {
      const temTodosItens = situacao.itensObrigatorios.every(id => 
        carrinho.some(item => item.id === id)
      );
      const temItensDemais = carrinho.length > situacao.metaItens;
      
      if (temTodosItens && !temItensDemais && Math.abs(totalGasto - situacao.respostaEsperada) <= 2) {
        isCorrect = true;
        feedback = "Perfeito! Você calculou certinho! 🎉";
      } else if (!temTodosItens) {
        feedback = `Você precisa dos itens específicos mencionados na pergunta!`;
      } else if (temItensDemais) {
        feedback = `Você adicionou itens demais! Foque apenas no que foi pedido.`;
      } else {
        feedback = `Quase lá! O resultado esperado era ${situacao.respostaEsperada} Robux, você calculou ${totalGasto} Robux.`;
      }
    } else if (situacao.restricaoOrcamento) {
      const dentroOrcamento = totalGasto <= situacao.restricaoOrcamento;
      const atingiuMeta = situacao.metaIdeal ? 
        Math.abs(totalGasto - situacao.metaIdeal) <= 5 :
        situacao.faixaIdeal ? 
          totalGasto >= situacao.faixaIdeal[0] && totalGasto <= situacao.faixaIdeal[1] :
          true;
      
      if (dentroOrcamento && atingiuMeta && carrinho.length === situacao.metaItens) {
        isCorrect = true;
        feedback = "Excelente estratégia! Você gerenciou o orçamento perfeitamente! 🏆";
      } else if (!dentroOrcamento) {
        feedback = `Você passou do orçamento! Limite: ${situacao.restricaoOrcamento} Robux.`;
      } else if (!atingiuMeta) {
        feedback = "Boa tentativa! Tente uma combinação diferente para atingir o objetivo.";
      } else {
        feedback = `Você precisa selecionar exatamente ${situacao.metaItens} itens.`;
      }
    }

    // Registrar dados
    const attempt = {
      studentName,
      timestamp: new Date().toISOString(),
      block: currentBlock.id,
      question: currentQuestion + 1,
      context: situacao.contexto,
      questionText: situacao.pergunta,
      expectedAnswer: situacao.respostaEsperada,
      userAnswer: totalGasto,
      itemsSelected: carrinho.map(item => item.nome).join(', '),
      timeSpent: Math.round(timeSpent),
      correct: isCorrect,
      feedback: feedback
    };

    setCollectedData([...collectedData, attempt]);
    setFeedbackMessage(feedback);
    setShowFeedback(true);

    setTimeout(() => {
      setShowFeedback(false);
      if (isCorrect) {
        proximaPergunta();
      }
    }, 3000);
  };

  const proximaPergunta = () => {
    if (currentQuestion < currentBlock.situacoes.length - 1) {
      setCurrentQuestion(currentQuestion + 1);
      setCarrinho([]);
      setStartTime(Date.now());
    } else {
      // Bloco concluído
      if (!completedBlocks.includes(currentBlock.id)) {
        setCompletedBlocks([...completedBlocks, currentBlock.id]);
      }
      setCurrentPhase('selecao');
    }
  };

  const voltarInicio = () => {
    setCurrentPhase('inicio');
    setCurrentBlock(null);
    setCurrentQuestion(0);
    setCarrinho([]);
    setCompletedBlocks([]);
  };

  const finalizarSessao = () => {
    if (collectedData.length === 0) {
      alert('Nenhum dado para exportar! Jogue pelo menos uma questão.');
      return;
    }

    const headers = ['Aluno', 'Data_Hora', 'Bloco', 'Questao', 'Contexto', 'Pergunta', 'Resposta_Esperada', 'Resposta_Aluno', 'Itens_Selecionados', 'Tempo_Gasto', 'Correto', 'Feedback'];
    const csvContent = [
      headers.join(','),
      ...collectedData.map(row => [
        row.studentName,
        row.timestamp,
        row.block,
        row.question,
        `"${row.context}"`,
        `"${row.questionText}"`,
        row.expectedAnswer,
        row.userAnswer,
        `"${row.itemsSelected}"`,
        row.timeSpent,
        row.correct,
        `"${row.feedback}"`
      ].join(','))
    ].join('\n');

    const blob = new Blob([csvContent], { type: 'text/csv;charset=utf-8;' });
    const link = document.createElement('a');
    link.href = URL.createObjectURL(blob);
    link.download = `loja_roblox_avancada_${studentName}_${new Date().toISOString().split('T')[0]}.csv`;
    link.click();

    alert('Relatório baixado com sucesso!');
  };

  // Tela de Início
  if (currentPhase === 'inicio') {
    return (
      <div className="min-h-screen bg-gradient-to-br from-purple-600 via-pink-600 to-red-600 flex items-center justify-center p-4">
        <div className="bg-white/90 backdrop-blur-sm rounded-2xl shadow-2xl p-8 max-w-lg w-full text-center">
          <div className="text-6xl mb-4">🎮</div>
          <h1 className="text-4xl font-bold text-purple-600 mb-2">Loja do Roblox</h1>
          <h2 className="text-2xl text-blue-600 mb-2">VERSÃO AVANÇADA</h2>
          <p className="text-lg text-gray-600 mb-6">Situações problema + Gestão de orçamento</p>
          
          <div className="bg-gradient-to-r from-yellow-100 to-orange-100 border-2 border-orange-300 rounded-lg p-6 mb-6">
            <h3 className="text-lg font-bold text-orange-800 mb-2">🎯 3 BLOCOS DE DESAFIOS:</h3>
            <div className="text-sm text-orange-700 space-y-1">
              <p>🟢 <strong>Bloco 1:</strong> Primeiras compras (fácil)</p>
              <p>🟡 <strong>Bloco 2:</strong> Situações interessantes (médio)</p>
              <p>🔴 <strong>Bloco 3:</strong> Restrições complexas (difícil)</p>
            </div>
          </div>

          <input
            type="text"
            placeholder="Digite seu nome"
            value={studentName}
            onChange={(e) => setStudentName(e.target.value)}
            className="w-full p-4 border-2 border-purple-300 rounded-lg text-xl mb-6 text-center font-bold"
          />
          
          <button
            onClick={iniciarJogo}
            className="w-full py-4 bg-gradient-to-r from-purple-600 to-pink-600 text-white font-bold text-xl rounded-lg hover:scale-105 transition-all duration-300 shadow-lg"
          >
            🚀 Começar Aventura!
          </button>
        </div>
      </div>
    );
  }

  // Tela de Seleção de Blocos
  if (currentPhase === 'selecao') {
    return (
      <div className="min-h-screen bg-gradient-to-br from-blue-500 via-purple-600 to-pink-600 p-4">
        {/* Header */}
        <div className="bg-white/90 backdrop-blur-sm rounded-2xl p-4 mb-6 shadow-lg">
          <div className="flex justify-between items-center">
            <div>
              <h2 className="text-2xl font-bold text-purple-600">👋 {studentName}</h2>
              <p className="text-gray-600">Escolha seu próximo desafio!</p>
            </div>
            <div className="flex space-x-3">
              <button
                onClick={voltarInicio}
                className="px-4 py-2 bg-gray-500 text-white rounded-lg hover:bg-gray-600 transition-all"
              >
                🏠 Início
              </button>
              <button
                onClick={finalizarSessao}
                className="px-4 py-2 bg-green-600 text-white rounded-lg hover:bg-green-700 transition-all"
              >
                📊 Finalizar Sessão
              </button>
            </div>
          </div>
        </div>

        {/* Blocos */}
        <div className="grid md:grid-cols-3 gap-6 max-w-6xl mx-auto">
          {blocos.map((bloco) => (
            <div key={bloco.id} className={`bg-gradient-to-br ${bloco.cor} rounded-2xl p-6 text-white shadow-2xl hover:scale-105 transition-all duration-300`}>
              <div className="text-center mb-4">
                <div className="text-4xl mb-2">
                  {bloco.id === 1 ? '🟢' : bloco.id === 2 ? '🟡' : '🔴'}
                </div>
                <h3 className="text-2xl font-bold mb-1">{bloco.titulo}</h3>
                <p className="text-sm opacity-90">{bloco.subtitulo}</p>
                <div className="inline-block bg-white/20 rounded-full px-3 py-1 text-xs font-bold mt-2">
                  {bloco.dificuldade}
                </div>
                {completedBlocks.includes(bloco.id) && (
                  <div className="text-2xl mt-2">✅ CONCLUÍDO</div>
                )}
              </div>

              <div className="bg-white/10 rounded-lg p-4 mb-4">
                <p className="text-sm font-semibold mb-2">🎯 Objetivo:</p>
                <p className="text-sm">{bloco.objetivo}</p>
                <p className="text-xs mt-2 opacity-80">
                  💰 Orçamento inicial: {bloco.robuxInicial} Robux
                </p>
                <p className="text-xs opacity-80">
                  📝 {bloco.situacoes.length} situações problema
                </p>
              </div>

              <button
                onClick={() => selecionarBloco(bloco)}
                className="w-full py-3 bg-white text-gray-800 font-bold rounded-lg hover:bg-gray-100 transition-all duration-300"
              >
                {completedBlocks.includes(bloco.id) ? '🔄 Jogar Novamente' : '🎮 Começar'}
              </button>
            </div>
          ))}
        </div>

        {/* Progresso */}
        <div className="max-w-4xl mx-auto mt-8 bg-white/90 backdrop-blur-sm rounded-2xl p-6">
          <h3 className="text-xl font-bold text-center text-gray-800 mb-4">📈 Seu Progresso</h3>
          <div className="grid grid-cols-3 gap-4 text-center">
            <div className="bg-green-100 rounded-lg p-4">
              <div className="text-2xl font-bold text-green-600">{completedBlocks.filter(id => id === 1).length}</div>
              <div className="text-sm text-green-800">Bloco Fácil</div>
            </div>
            <div className="bg-yellow-100 rounded-lg p-4">
              <div className="text-2xl font-bold text-yellow-600">{completedBlocks.filter(id => id === 2).length}</div>
              <div className="text-sm text-yellow-800">Bloco Médio</div>
            </div>
            <div className="bg-red-100 rounded-lg p-4">
              <div className="text-2xl font-bold text-red-600">{completedBlocks.filter(id => id === 3).length}</div>
              <div className="text-sm text-red-800">Bloco Difícil</div>
            </div>
          </div>
        </div>
      </div>
    );
  }

  // Tela do Jogo
  if (currentPhase === 'jogo') {
    const situacao = currentBlock.situacoes[currentQuestion];
    const robuxDisponivel = situacao.robuxDisponiveis || robuxBalance;
    const sobra = robuxDisponivel - totalGasto;
    
    return (
      <div className="min-h-screen bg-gradient-to-br from-blue-600 via-purple-600 to-pink-600 p-4">
        
        {/* Header com destaque para dinheiro */}
        <div className="bg-white/95 backdrop-blur-sm rounded-2xl p-6 mb-6 shadow-2xl border-4 border-yellow-400">
          <div className="grid grid-cols-1 md:grid-cols-4 gap-4 items-center">
            <div>
              <h2 className="text-lg font-bold text-purple-600">{currentBlock.titulo}</h2>
              <p className="text-sm text-gray-600">Questão {currentQuestion + 1} de {currentBlock.situacoes.length}</p>
            </div>
            
            {/* CARTEIRA */}
            <div className="bg-gradient-to-r from-green-400 to-green-600 rounded-xl p-4 text-center shadow-lg">
              <div className="text-xs text-white opacity-80">💰 CARTEIRA</div>
              <div className="text-2xl font-black text-white">{robuxDisponivel}</div>
              <div className="text-xs text-green-100">Robux disponíveis</div>
            </div>

            {/* TOTAL GASTO */}
            <div className="bg-gradient-to-r from-red-400 to-red-600 rounded-xl p-4 text-center shadow-lg">
              <div className="text-xs text-white opacity-80">💸 GASTOU</div>
              <div className="text-2xl font-black text-white">{totalGasto}</div>
              <div className="text-xs text-red-100">Robux gastos</div>
            </div>

            {/* SOBRA */}
            <div className={`bg-gradient-to-r ${sobra >= 0 ? 'from-blue-400 to-blue-600' : 'from-red-500 to-red-700'} rounded-xl p-4 text-center shadow-lg`}>
              <div className="text-xs text-white opacity-80">💵 SOBRA</div>
              <div className="text-2xl font-black text-white">{sobra}</div>
              <div className="text-xs text-blue-100">Robux restantes</div>
            </div>
          </div>
        </div>

        {/* Situação problema */}
        <div className="bg-white/95 backdrop-blur-sm rounded-2xl p-6 mb-6 shadow-2xl">
          <div className="bg-blue-50 rounded-lg p-4 mb-4">
            <p className="text-lg text-gray-800 mb-3">{situacao.contexto}</p>
            <div className="bg-orange-100 border-l-4 border-orange-500 p-4 rounded">
              <p className="text-xl font-bold text-orange-800">{situacao.pergunta}</p>
            </div>
            {situacao.dica && (
              <div className="mt-3 p-3 bg-yellow-100 rounded-lg">
                <p className="text-sm text-yellow-800">💡 <strong>Dica:</strong> {situacao.dica}</p>
              </div>
            )}
          </div>
        </div>

        <div className="grid md:grid-cols-2 gap-6">
          {/* Loja */}
          <div className="bg-white/95 backdrop-blur-sm rounded-2xl p-6 shadow-2xl">
            <h3 className="text-2xl font-bold text-purple-600 mb-4 text-center">🛍️ Itens Disponíveis</h3>
            <div className="space-y-3">
              {situacao.itens.map((item) => (
                <div key={item.id} className="border-2 border-purple-200 rounded-lg p-4 hover:border-purple-400 transition-all bg-gradient-to-r from-white to-purple-50">
                  <div className="flex items-center justify-between">
                    <div className="flex items-center space-x-3">
                      <div className="text-3xl">{item.emoji}</div>
                      <div>
                        <h4 className="font-bold text-gray-800">{item.nome}</h4>
                        <div className="text-lg font-bold text-blue-600">{item.preco} Robux</div>
                      </div>
                    </div>
                    
                    <div className="flex space-x-2">
                      {carrinho.find(c => c.id === item.id) ? (
                        <button
                          onClick={() => removerDoCarrinho(item.id)}
                          className="px-4 py-2 bg-red-500 text-white rounded-lg font-bold hover:bg-red-600 transition-all"
                        >
                          ❌ Remover
                        </button>
                      ) : (
                        <button
                          onClick={() => adicionarAoCarrinho(item)}
                          className="px-4 py-2 bg-purple-500 text-white rounded-lg font-bold hover:bg-purple-600 transition-all"
                        >
                          ➕ Adicionar
                        </button>
                      )}
                    </div>
                  </div>
                </div>
              ))}
            </div>
          </div>

          {/* Carrinho */}
          <div className="bg-white/95 backdrop-blur-sm rounded-2xl p-6 shadow-2xl">
            <h3 className="text-2xl font-bold text-blue-600 mb-4 text-center">🛒 Seu Carrinho</h3>
            
            {carrinho.length === 0 ? (
              <div className="text-center text-gray-500 py-8">
                <div className="text-4xl mb-2">🛒</div>
                <p>Carrinho vazio!</p>
                <p className="text-sm">Adicione itens para resolver o problema</p>
              </div>
            ) : (
              <div className="space-y-3">
                {carrinho.map((item, index) => (
                  <div key={index} className="bg-gradient-to-r from-gray-50 to-blue-50 rounded-lg p-4 border-2 border-gray-200">
                    <div className="flex items-center justify-between">
                      <div className="flex items-center space-x-3">
                        <span className="text-2xl">{item.emoji}</span>
                        <div>
                          <span className="font-bold">{item.nome}</span>
                          <div className="text-sm text-gray-600">{item.preco} Robux</div>
                        </div>
                      </div>
                    </div>
                  </div>
                ))}
                
                <div className="border-t-4 border-green-500 pt-4 bg-gradient-to-r from-green-50 to-blue-50 rounded-lg p-4">
                  <div className="flex justify-between items-center text-xl font-bold">
                    <span>TOTAL:</span>
                    <span className="text-green-600 text-2xl">{totalGasto} Robux</span>
                  </div>
                  <div className="flex justify-between items-center text-lg">
                    <span>SOBRA:</span>
                    <span className={`text-xl font-bold ${sobra >= 0 ? 'text-blue-600' : 'text-red-600'}`}>
                      {sobra} Robux
                    </span>
                  </div>
                </div>

                <button
                  onClick={verificarResposta}
                  disabled={carrinho.length === 0}
                  className="w-full py-4 bg-gradient-to-r from-green-500 to-blue-500 text-white font-bold text-xl rounded-lg hover:scale-105 transition-all duration-300 disabled:opacity-50 disabled:cursor-not-allowed"
                >
                  ✅ Verificar Resposta
                </button>
              </div>
            )}
          </div>
        </div>

        {/* Botões de navegação */}
        <div className="flex justify-center space-x-4 mt-6">
          <button
            onClick={() => setCurrentPhase('selecao')}
            className="px-6 py-3 bg-gray-500 text-white rounded-lg hover:bg-gray-600 transition-all"
          >
            ← Voltar aos Blocos
          </button>
          <button
            onClick={voltarInicio}
            className="px-6 py-3 bg-purple-500 text-white rounded-lg hover:bg-purple-600 transition-all"
          >
            🏠 Página Inicial
          </button>
        </div>

        {/* Feedback */}
        {showFeedback && (
          <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
            <div className="bg-white rounded-2xl p-8 text-center max-w-md mx-4">
              <div className="text-6xl mb-4">
                {feedbackMessage.includes('Perfeito') || feedbackMessage.includes('Excelente') ? '🎉' : '🤔'}
              </div>
              <p className="text-lg font-semibold text-gray-800">{feedbackMessage}</p>
            </div>
          </div>
        )}
      </div>
    );
  }
};

export default LojaRobloxAvancada;